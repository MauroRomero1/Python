'''5. Manejo de Errores y Excepciones
Aprende a manejar errores usando try, except, finally, y raise.
Ejemplo pr√°ctico : Crear programas que no caigan inesperadamente y den retroalimentaci√≥n al usuario.'''



'''  ------ LAS EXCEPCIONES --------
Las excepciones son eventos que ocurren durante la ejecuci√≥n de un programa y que interrumpen el flujo normal de ejecuci√≥n.

    Ejemplos comunes de excepciones en Python:
        ZeroDivisionError: Dividir un n√∫mero entre cero.
        ValueError: Conversi√≥n inv√°lida de tipos.
        FileNotFoundError: Archivo inexistente.
        IndexError: Acceso a un √≠ndice fuera de rango en una lista.'''

# Estructura de try-except
try:
    # C√≥digo que puede generar una excepci√≥n
    x = int(input("Ingresa un n√∫mero: "))
    print(10 / x)
except ZeroDivisionError:
    print("No puedes dividir entre cero.")
except ValueError:
    print("Debes ingresar un n√∫mero v√°lido.")

# Bloque else: El bloque else se ejecuta si no ocurre ninguna excepci√≥n.
try:
    x = int(input("Ingresa un n√∫mero: "))
except ValueError:
    print("Entrada inv√°lida.")
else:
    print(f"Ingresaste el n√∫mero: {x}")


#Bloque finally:El bloque finally se ejecuta siempre, ocurra o no una excepci√≥n. Es √∫til para liberar recursos
try:
    archivo = open("archivo.txt", "r")
    contenido = archivo.read()
except FileNotFoundError:
    print("El archivo no existe.")
finally:
    print("Cerrando el programa.")
    archivo.close()

#Capturar excepciones gen√©ricas: Usar except Exception captura cualquier excepci√≥n, pero es importante usarlo con precauci√≥n para no ocultar errores inesperados.
try:
    resultado = 10 / 0
except Exception as e:
    print(f"Ocurri√≥ un error: {e}")
'''üîë Buena pr√°ctica: Captura excepciones espec√≠ficas siempre que sea posible para evitar capturar m√°s de lo necesario.'''

#Lanzar excepciones manualmente: Puedes usar raise para generar tus propias excepciones:
x = -5
if x < 0:
    raise ValueError("El n√∫mero debe ser positivo.")

#Crear excepciones personalizadas: para manejar casos espec√≠ficos de tu programa.
class MiErrorPersonalizado(Exception):
    def __init__(self, mensaje):
        self.mensaje = mensaje

try:
    raise MiErrorPersonalizado("Este es un error personalizado.")
except MiErrorPersonalizado as e:
    print(f"Error: {e.mensaje}")

#Contexto avanzado: Registrar excepciones en archivos
try:
    x = int("no_numero")
except ValueError as e:
    with open("errores.log", "a") as log:
        log.write(f"Error: {e}\n")

#Reintentar operaciones: En ciertos casos, puedes intentar que el usuario corrija su error:
while True:
    try:
        x = int(input("Ingresa un n√∫mero: "))
        print(f"N√∫mero v√°lido: {x}")
        break
    except ValueError:
        print("Entrada no v√°lida. Intenta de nuevo.")

#Usar librer√≠as como logging
import logging

logging.basicConfig(filename="app.log", level=logging.ERROR)

try:
    resultado = 10 / 0
except ZeroDivisionError as e:
    logging.error(f"Error: {e}")

'''Buenas pr√°cticas para manejo de errores
üîë S√© espec√≠fico: Captura excepciones particulares (ZeroDivisionError, ValueError, etc.).
üîë Evita bloques vac√≠os: No dejes un bloque except sin manejar el error.
üîë Documenta las excepciones esperadas: Escribe comentarios o docstrings que describan las excepciones posibles.
üîë Limpia los recursos: Usa finally para cerrar archivos o liberar memoria.
üîë Maneja solo lo necesario: No abuses de try-except para cubrir todos los problemas; encuentra y corrige los errores donde se originan.
'''